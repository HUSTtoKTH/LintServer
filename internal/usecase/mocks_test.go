// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/HUSTtoKTH/lintserver/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockLint is a mock of Lint interface.
type MockLint struct {
	ctrl     *gomock.Controller
	recorder *MockLintMockRecorder
}

// MockLintMockRecorder is the mock recorder for MockLint.
type MockLintMockRecorder struct {
	mock *MockLint
}

// NewMockLint creates a new mock instance.
func NewMockLint(ctrl *gomock.Controller) *MockLint {
	mock := &MockLint{ctrl: ctrl}
	mock.recorder = &MockLintMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLint) EXPECT() *MockLintMockRecorder {
	return m.recorder
}

// GetRule mocks base method.
func (m *MockLint) GetRule(ctx context.Context, projectId int64, token string) (*entity.Lint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", ctx, projectId, token)
	ret0, _ := ret[0].(*entity.Lint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockLintMockRecorder) GetRule(ctx, projectId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockLint)(nil).GetRule), ctx, projectId, token)
}

// Upload mocks base method.
func (m *MockLint) Upload(ctx context.Context, l entity.Lint, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, l, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockLintMockRecorder) Upload(ctx, l, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockLint)(nil).Upload), ctx, l, token)
}

// MockLintRepo is a mock of LintRepo interface.
type MockLintRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLintRepoMockRecorder
}

// MockLintRepoMockRecorder is the mock recorder for MockLintRepo.
type MockLintRepoMockRecorder struct {
	mock *MockLintRepo
}

// NewMockLintRepo creates a new mock instance.
func NewMockLintRepo(ctrl *gomock.Controller) *MockLintRepo {
	mock := &MockLintRepo{ctrl: ctrl}
	mock.recorder = &MockLintRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLintRepo) EXPECT() *MockLintRepoMockRecorder {
	return m.recorder
}

// GetRule mocks base method.
func (m *MockLintRepo) GetRule(ctx context.Context, projectId int64) (*entity.Lint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", ctx, projectId)
	ret0, _ := ret[0].(*entity.Lint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockLintRepoMockRecorder) GetRule(ctx, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockLintRepo)(nil).GetRule), ctx, projectId)
}

// Upsert mocks base method.
func (m *MockLintRepo) Upsert(arg0 context.Context, arg1 entity.Lint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockLintRepoMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockLintRepo)(nil).Upsert), arg0, arg1)
}

// MockAccountWebAPI is a mock of AccountWebAPI interface.
type MockAccountWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAccountWebAPIMockRecorder
}

// MockAccountWebAPIMockRecorder is the mock recorder for MockAccountWebAPI.
type MockAccountWebAPIMockRecorder struct {
	mock *MockAccountWebAPI
}

// NewMockAccountWebAPI creates a new mock instance.
func NewMockAccountWebAPI(ctrl *gomock.Controller) *MockAccountWebAPI {
	mock := &MockAccountWebAPI{ctrl: ctrl}
	mock.recorder = &MockAccountWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountWebAPI) EXPECT() *MockAccountWebAPIMockRecorder {
	return m.recorder
}

// GetUserProjects mocks base method.
func (m *MockAccountWebAPI) GetUserProjects(ctx context.Context, userId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProjects", ctx, userId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProjects indicates an expected call of GetUserProjects.
func (mr *MockAccountWebAPIMockRecorder) GetUserProjects(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProjects", reflect.TypeOf((*MockAccountWebAPI)(nil).GetUserProjects), ctx, userId)
}

// IsAdmin mocks base method.
func (m *MockAccountWebAPI) IsAdmin(ctx context.Context, userId, organizationId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userId, organizationId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockAccountWebAPIMockRecorder) IsAdmin(ctx, userId, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAccountWebAPI)(nil).IsAdmin), ctx, userId, organizationId)
}

// Verify mocks base method.
func (m *MockAccountWebAPI) Verify(ctx context.Context, token string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAccountWebAPIMockRecorder) Verify(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAccountWebAPI)(nil).Verify), ctx, token)
}
